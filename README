
quoter - quote arguments or standard input for usage in POSIX shell by eval

Author: Martin VÃ¤th <martin@mvath.de>

This project is under the MIT license.

This script serves two purposes:

(a) Quote arguments for eval or remote usage in POSIX shells
(b) Allow to deal in POSIX shell with output from tools which output
strings separated by \0 (like GNU find -print0), similar to the GNU xargs -0

This is best explained by some example POSIX shell script snippets.

1.
	su -c "$(quoter -- cat -- "$@")"

The effect of the above snippet is similar to
	su -c "cat -- $@"
except that the latter cannot be used if the arguments might contain
a special character. In fact, if $1 has e.g. the value "; rm -rf *"
then that bad code would be executed, because the whole argument is
interpreted by the remote shell.

2.
	eval "set -- a `find . -print0 | quoter --stdin`"
	shift
	for file
	do ...
	done

This will (recursively) iterate through all files from the current directory.
In contrast to the "naive" approach
	for file in `find .`
	do ...
	done
the above has no problem with special characters (like spaces) in filenames.
Of course, find has to understand the non-POSIX option -print0 fo this.
(The trick to set one "dummy" argument "a" and then to shift it away is
needed only for some buggy shells for the case that "find" would not output
any files.)

Type "quoter --help" to see the detailed options which quoter does support.

The options -s (--short) and -l (--long) need a more verbose explanation:
Roughly speaking, quoter is intended to be used such that
	eval "set -- `quoter ...`"
can always be safely executed, i.e. all possibly "disturbing" characters
are quoted or escaped. Certain non-POSIX extensions of some shells might
require quoting further characters.
For instance, {a,b} is by some shells interpreted as "a" "b".
Any quoting which the author is aware of the currently existing popular
shell versions (bash, dash, zsh, ksh, busybox, bosh, Bourne shell) is
taken care of, and if some quoting is missing, this will likely be fixed
in a future release of "quoter".
This assertion holds with and without the options -s and -l, but with
the option -s, the quoting is less aggressive while with -l it is more
aggressive. This means that with the option -s, the generated string is
usually more shorter (though usually not more readable) while with -l
the generated string is usually longer due to unnecessary quoting.
The default -S (--unshort) is a reasonable compromise which is readable
and safe (unless somebody is extremely paranoid and wants to be safe for
any future nonstandard shell extensions).

Installation: Just compile the single file src/quoter.c (usually it suffices
to run "make") and copy the result in your $PATH under the name "quoter".
The code is c89 compatible with the exception of two compiler specials
which might optimize the code.
If compilation fails, try to use the compiler options
-DAVOID_BUILTIN_EXPECT and/or -DAVOID_ATTRIBUTE_NORETURN
to avoid these specials.
To obtain zsh completions also copy the content of zsh/ to zsh's $fpath
(perhaps /usr/share/zsh/site-functions/).

For gentoo, there is an ebuild in the mv overlay (available by layman).
